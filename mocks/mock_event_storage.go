// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lukecold/event-driver/storage (interfaces: EventStore)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_event_storage.go -package=mocks github.com/lukecold/event-driver/storage EventStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	event "github.com/lukecold/event-driver/event"
	gomock "go.uber.org/mock/gomock"
)

// MockEventStore is a mock of EventStore interface.
type MockEventStore struct {
	ctrl     *gomock.Controller
	recorder *MockEventStoreMockRecorder
}

// MockEventStoreMockRecorder is the mock recorder for MockEventStore.
type MockEventStoreMockRecorder struct {
	mock *MockEventStore
}

// NewMockEventStore creates a new mock instance.
func NewMockEventStore(ctrl *gomock.Controller) *MockEventStore {
	mock := &MockEventStore{ctrl: ctrl}
	mock.recorder = &MockEventStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStore) EXPECT() *MockEventStoreMockRecorder {
	return m.recorder
}

// ListSourcesByKey mocks base method.
func (m *MockEventStore) ListSourcesByKey(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSourcesByKey", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSourcesByKey indicates an expected call of ListSourcesByKey.
func (mr *MockEventStoreMockRecorder) ListSourcesByKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSourcesByKey", reflect.TypeOf((*MockEventStore)(nil).ListSourcesByKey), arg0, arg1)
}

// LookUp mocks base method.
func (m *MockEventStore) LookUp(arg0 context.Context, arg1, arg2 string) (*event.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookUp", arg0, arg1, arg2)
	ret0, _ := ret[0].(*event.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookUp indicates an expected call of LookUp.
func (mr *MockEventStoreMockRecorder) LookUp(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookUp", reflect.TypeOf((*MockEventStore)(nil).LookUp), arg0, arg1, arg2)
}

// LookUpByKey mocks base method.
func (m *MockEventStore) LookUpByKey(arg0 context.Context, arg1 string) ([]*event.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookUpByKey", arg0, arg1)
	ret0, _ := ret[0].([]*event.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookUpByKey indicates an expected call of LookUpByKey.
func (mr *MockEventStoreMockRecorder) LookUpByKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookUpByKey", reflect.TypeOf((*MockEventStore)(nil).LookUpByKey), arg0, arg1)
}

// Persist mocks base method.
func (m *MockEventStore) Persist(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Persist indicates an expected call of Persist.
func (mr *MockEventStoreMockRecorder) Persist(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockEventStore)(nil).Persist), arg0, arg1, arg2, arg3)
}
