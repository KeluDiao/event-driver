// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/honestbank/event-driver/handlers (interfaces: CallNext)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_handlers.go -package=mocks github.com/honestbank/event-driver/handlers CallNext
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	event "github.com/honestbank/event-driver/event"
	gomock "go.uber.org/mock/gomock"
)

// MockCallNext is a mock of CallNext interface.
type MockCallNext struct {
	ctrl     *gomock.Controller
	recorder *MockCallNextMockRecorder
}

// MockCallNextMockRecorder is the mock recorder for MockCallNext.
type MockCallNextMockRecorder struct {
	mock *MockCallNext
}

// NewMockCallNext creates a new mock instance.
func NewMockCallNext(ctrl *gomock.Controller) *MockCallNext {
	mock := &MockCallNext{ctrl: ctrl}
	mock.recorder = &MockCallNextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallNext) EXPECT() *MockCallNextMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockCallNext) Call(arg0 context.Context, arg1 *event.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockCallNextMockRecorder) Call(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockCallNext)(nil).Call), arg0, arg1)
}
